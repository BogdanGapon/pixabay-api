{"version":3,"file":"static/js/173.b4e715d8.chunk.js","mappings":"iLAKaA,EAAgB,SAAHC,GAA4C,IAAtCC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MAKxC,OACEC,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAAA,SACEE,KAAK,OACLH,MAAOA,EACPD,SAToB,SAACK,GACzB,OAAOL,EAASK,EAAEC,OAAOL,MAC3B,EAQMM,YAAY,oBAIpB,E,4CChBaC,EAAa,SAAHT,GAAgD,IAA1CE,EAAKF,EAALE,MAAOD,EAAQD,EAARC,SAIlC,OACEE,EAAAA,EAAAA,KAAA,SACEE,KAAK,OACLG,YAAY,kBACZN,MAAOA,EACPD,SARkB,SAACK,GACrBL,EAASK,EAAEC,OAAOL,MAAMQ,OAC1B,GASF,EC+DA,EAxEiB,WAAO,IAADC,EACrBC,GAAwCC,EAAAA,EAAAA,UAAiB,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAC9BI,GAAcC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,QAAQ,IACpDC,GAAWC,EAAAA,EAAAA,KACXC,GAAWC,EAAAA,EAAAA,MAEjBC,GAAwCC,EAAAA,EAAAA,MAAiBC,GAAAb,EAAAA,EAAAA,GAAAW,EAAA,GAAlDG,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAC9BG,EAA8C,QAA3BpB,EAAGkB,EAAaG,IAAI,eAAO,IAAArB,EAAAA,EAAI,GA4BxD,OACEsB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA9B,SAAA,EACED,EAAAA,EAAAA,KAACJ,EAAa,CAACE,SA5BQ,SAACkC,GAE1BL,EADgC,KAATK,EAAc,CAAEA,KAAMA,GAAS,CAAC,EAEzD,EAyBiDjC,MAAO6B,KACpD5B,EAAAA,EAAAA,KAACM,EAAU,CAACP,MAAOc,EAAcf,SAlBR,SAACC,GAC5Be,EAAgBf,EAClB,KAiBIC,EAAAA,EAAAA,KAAA,MACEiC,MAAO,CACLC,QAAS,OACTC,SAAU,OACVC,IAAK,OACLC,UAAW,QACXpC,SA9BCc,EAAYuB,QAAO,SAAAC,GACxB,OAAOA,EAAQP,KAAKQ,cAAcC,SAASb,EAAYY,cACzD,IA8B6BE,KAAI,SAAAH,GAAO,OAClCT,EAAAA,EAAAA,MAAA,MAEEG,MAAO,CACLU,MAAO,QACPC,OAAQ,QACRC,OAAQ,gBACRC,UAAW,UACX7C,SAAA,EAEFD,EAAAA,EAAAA,KAAC+C,EAAAA,GAAI,CAACC,GAAIT,EAAQU,GAAIhC,MAAO,CAAEiC,KAAM7B,GAAWpB,UAC9CD,EAAAA,EAAAA,KAAA,KAAAC,SAAIsC,EAAQP,UAEdhC,EAAAA,EAAAA,KAAA,UAAQE,KAAK,SAASiD,QAAS,kBA7BlBF,EA6BsCV,EAAQU,QA5BnE9B,GAASiC,EAAAA,EAAAA,IAAcH,IADH,IAACA,CA6BiD,EAAChD,SAAC,qBAX3DsC,EAAQU,GAcV,OAGTjD,EAAAA,EAAAA,KAAA,UAAQE,KAAK,SAASiD,QA3CJ,SAAChD,GACA,KAAjBU,IAGJM,GAASkC,EAAAA,EAAAA,IAAWxC,IACpBC,EAAgB,IAClB,EAqCiDb,SAAC,sBAKpD,C,0FCzEamB,EAAoCkC,EAAAA,GACpCtC,EAAkDuC,EAAAA,E","sources":["components/SearchProduct.tsx","components/AddProduct.tsx","pages/Products.tsx","redux/hooks.tsx"],"sourcesContent":["type changeProduct = {\r\n  onChange: (name: string) => void;\r\n  value: string;\r\n};\r\n\r\nexport const SearchProduct = ({ onChange, value }: changeProduct) => {\r\n  const searchProductName = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    return onChange(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={searchProductName}\r\n        placeholder=\"Search by name\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","type productValueProps = {\r\n  value: string;\r\n  onChange: (value: string) => void;\r\n};\r\nexport const AddProduct = ({ value, onChange }: productValueProps) => {\r\n  const addNewProduct = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    onChange(e.target.value.trim());\r\n  };\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      placeholder=\"Add new product\"\r\n      value={value}\r\n      onChange={addNewProduct}\r\n    />\r\n  );\r\n};\r\n","import { SearchProduct } from '../components/SearchProduct';\r\nimport { useState } from 'react';\r\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\r\nimport { useAppDispatch, useAppSelector } from '../redux/hooks';\r\nimport { addProduct, deleteProduct } from '../redux/productsSlice';\r\nimport { AddProduct } from '../components/AddProduct';\r\n\r\nconst Products = () => {\r\n  const [productValue, SetProductValue] = useState<string>('');\r\n  const allProducts = useAppSelector(state => state.products);\r\n  const dispatch = useAppDispatch();\r\n  const location = useLocation();\r\n\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const productName: string = searchParams.get('name') ?? '';\r\n\r\n  const updateSearchParams = (name: string) => {\r\n    const nextParams: {} = name !== '' ? { name: name } : {};\r\n    setSearchParams(nextParams);\r\n  };\r\n\r\n  const updatedListOfProducts = () => {\r\n    return allProducts.filter(product => {\r\n      return product.name.toLowerCase().includes(productName.toLowerCase());\r\n    });\r\n  };\r\n\r\n  const addNewValueOfProduct = (value: string) => {\r\n    SetProductValue(value);\r\n  };\r\n  const addNewProduct = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    if (productValue === '') {\r\n      return;\r\n    }\r\n    dispatch(addProduct(productValue));\r\n    SetProductValue('');\r\n  };\r\n\r\n  const removeProduct = (id: string) => {\r\n    dispatch(deleteProduct(id));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <SearchProduct onChange={updateSearchParams} value={productName} />\r\n      <AddProduct value={productValue} onChange={addNewValueOfProduct} />\r\n      <ul\r\n        style={{\r\n          display: 'flex',\r\n          flexWrap: 'wrap',\r\n          gap: '20px',\r\n          listStyle: 'none',\r\n        }}\r\n      >\r\n        {updatedListOfProducts().map(product => (\r\n          <li\r\n            key={product.id}\r\n            style={{\r\n              width: '300px',\r\n              height: '300px',\r\n              border: '1px solid red',\r\n              textAlign: 'center',\r\n            }}\r\n          >\r\n            <Link to={product.id} state={{ from: location }}>\r\n              <p>{product.name}</p>\r\n            </Link>\r\n            <button type=\"button\" onClick={() => removeProduct(product.id)}>\r\n              Delete product\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <button type=\"button\" onClick={addNewProduct}>\r\n        Add new product\r\n      </button>\r\n    </>\r\n  );\r\n};\r\nexport default Products;\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport type { TypedUseSelectorHook } from 'react-redux';\r\n\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\nexport const useAppDispatch: () => AppDispatch = useDispatch;\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n"],"names":["SearchProduct","_ref","onChange","value","_jsx","children","type","e","target","placeholder","AddProduct","trim","_searchParams$get","_useState","useState","_useState2","_slicedToArray","productValue","SetProductValue","allProducts","useAppSelector","state","products","dispatch","useAppDispatch","location","useLocation","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","productName","get","_jsxs","_Fragment","name","style","display","flexWrap","gap","listStyle","filter","product","toLowerCase","includes","map","width","height","border","textAlign","Link","to","id","from","onClick","deleteProduct","addProduct","useDispatch","useSelector"],"sourceRoot":""}